<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_58872_needit.FetchIPDetails</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>FetchIPDetails</name>
        <script><![CDATA[var FetchIPDetails = Class.create();
FetchIPDetails.prototype = {
    initialize: function(mid_server) {
        this.midServer = mid_server;
        this.source = "";
        this.name = "JavascriptProbe";
        this.payload = "";
        this.topic = "JavascriptProbe";
    },
    setName: function(details) {
        this.name = details;
    },

    setSource: function(s) {
        this.source = s;
    },

    setParameter: function(params) {
        this.payload += '<parameters>';
        for (var param in params)
            this.payload += '<parameter name="' + param + '" value="' + params[param] + '"/>';
        this.payload += '</parameters>';
    },

    create: function() {
        var egr = new GlideRecord("ecc_queue");
        egr.agent = "mid.server." + this.midServer;
        egr.queue = "output";
        egr.state = "ready";
        egr.topic = this.topic;
        egr.name = this.name;
        egr.source = this.source;
        egr.payload = this.payload;
        return egr.insert();
    },

    getEccResponse: function(outputSysId, waitMS) {
        if (!waitMS) {
            waitMS = 25000;
        }
        var start = new GlideDateTime;

        //Loop waiting for a record that is created in response to your query
        var resp = new GlideRecord("ecc_queue");
        resp.addQuery("response_to", outputSysId);
        resp.addQuery("queue", "input");
        do {
            resp.query();
            resp.next();
            var unixtime_ms = new Date().getTime();
            while (new Date().getTime() < unixtime_ms + 1000) {}
            if (GlideDateTime.subtract(start, new GlideDateTime()).getNumericValue() > waitMS) {
                return null;
            }
        } while (!resp.sys_id);

        //Found a response
        return gs.xmlToJSON(resp.payload).results.result.output;

    },

    type: 'FetchIPDetails'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2021-09-03 12:31:10</sys_created_on>
        <sys_id>b677687e2f5a3410198ffe1df699b637</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>FetchIPDetails</sys_name>
        <sys_package display_value="NeedIt" source="x_58872_needit">6ead8e780f603200cd674f8ce1050ed1</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="NeedIt">6ead8e780f603200cd674f8ce1050ed1</sys_scope>
        <sys_update_name>sys_script_include_b677687e2f5a3410198ffe1df699b637</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2021-09-03 12:31:10</sys_updated_on>
    </sys_script_include>
</record_update>
